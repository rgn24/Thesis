/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     5.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  | For copyright notice see file Copyright         |
\*---------------------------------------------------------------------------*/
FoamFile
{
	version     2.0;
	format      ascii;
	class       dictionary;
	object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1e-09;

vertices
(
	(0 0 0) 		//0
	(0 0.1744775495 3.996192886) 		//1
	(0 -0.1744775495 3.996192886) 		//2
	(400 0 0) 		//3
	(400 0.1744775495 3.996192886) 		//4
	(400 -0.1744775495 3.996192886) 		//5
	//(212.5 0 0) 		//6
	//(212.5 0.1744775495 3.996192886) 		//7
	//(212.5 -0.1744775495 3.996192886) 		//8
	//(170 0.523432648384032 11.988578658982293) 		//9
	//(170 -0.523432648384032 11.988578658982293) 		//10
	//(212.5 0.523432648384032 11.988578658982293) 		//11
	//(212.5 -0.523432648384032 11.988578658982293) 		//12
);

blocks
(	
	hex (0 1 2 0 3 4 5 3) (13 1 1000) simpleGrading (1 1 1)
	//hex (3 4 5 3 6 7 8 6) (8 1 84) simpleGrading (1 1 1)
	//hex (4 9 10 5 7 11 12 8) (18 1 84) simpleGrading (1 1 1)
);

edges
(
);

boundary
(
    
     front
      { 
           type wedge;
           faces  
           (
               (0 3 4 1)
               //(3 6 7 4)
               //(4 7 11 9)
           );
      }
     back
      { 
           type wedge;
           faces  
           (
               (0 2 5 3)
               //(3 5 8 6)
               //(5 10 12 8)
           );
      } 
     wall
      {
           type wall;
           faces  
           (
               (1 2 5 4)
               //(4 9 10 5)
               //(9 11 12 10)
           );
      }

     top
      { 
           type patch;
           faces  
           (
               (3 5 4 3)
               //(6 8 7 6)
               //(8 12 11 7)
           );
      }
     bottom
      {
           type patch;
           faces  
           (
               (0 1 2 0)
           );
      }
     axis
      { 
           type empty;
           faces  
           (
               (0 3 3 0)
               //(3 6 6 3)
           );
      } 
);

mergePatchPairs
(
);
